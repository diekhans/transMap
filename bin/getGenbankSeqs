#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import sqlite3
import argparse
from transMap.genomeDefs import AnnSetType
from transMap.transMapLite import getSrcAccsFile, loadSeqFa
from pycbio.sys import fileOps
import pipettor

verbose = False


def parseArgs():
    desc = """Obtain RNA sequence file for the GenBank and RefSeq alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--verbose", action="store_true", default=False,
                        help="""verbose tracing""")
    parser.add_argument("srcHgDb", help="""Genome database for assembly""")
    parser.add_argument("annSetType", choices=(AnnSetType.mrna, AnnSetType.splicedEst, AnnSetType.refSeq), type=AnnSetType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset; must have srcAligns table loaded with alignments""")
    return parser.parse_args()


def getSeqFasta(srcHgDb, annSetType, tmpAccFile):
    "get fasta file"
    tmpSeqFa = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annSetType), ".fa")
    getRnaCmd = ("getRna", "-inclVer", "hgFixed", tmpAccFile, "/dev/stdout")
    srcDbCmd = ("awk", "-v", "srcDb={}".format(srcHgDb),
                '''/^>/{$0 = ">" srcDb ":" substr($0, 2)} {print $0}''')
    cmds = [getRnaCmd, srcDbCmd]
    pipettor.run(cmds, stdout=tmpSeqFa)
    return tmpSeqFa


def getGenbankSeqs(srcHgDb, annSetType, transMapSrcDb):
    transMapSrcDbConn = sqlite3.connect(transMapSrcDb)
    tmpAccFile = getSrcAccsFile(annSetType, transMapSrcDbConn)
    tmpSeqFa = getSeqFasta(srcHgDb, annSetType, tmpAccFile)
    loadSeqFa(tmpSeqFa, transMapSrcDbConn)
    transMapSrcDbConn.close()
    fileOps.rmFiles(tmpAccFile, tmpSeqFa)

# entry
opts = parseArgs()
getGenbankSeqs(opts.srcHgDb, opts.annSetType, opts.transMapSrcDb)
