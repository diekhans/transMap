#!/usr/bin/env python

import sys, os, string
rootDir = os.path.normpath(os.path.dirname(os.path.realpath(sys.argv[0])) + "/..")
sys.path = [rootDir + "/extern/pycbio/lib", rootDir + "/lib/py"] + sys.path
from optparse import OptionParser
import glob,re
from pycbio.sys.fileOps import prRowv
from pycbio.sys import setOps, fileOps
from transMap.genomeDefs import GenomeDefs, GenomeDb
from transMap import phyloTreeOps


class CmdOpts(object):
    usage = """%prog [options] genomeDefsPickle newickFileList reportTsv
    Search for Newick trees to satisfy the missing pairs in the genomeDefs.
     """

    def __init__(self):
        parser = OptionParser(usage=CmdOpts.usage)
        parser.add_option("--debug", dest="debug", action="store_true", default=False,
                          help="print debugging information")
        parser.add_option("--tree", dest="trees", action="append", default=[],
                          help="set branch lengths from this tree file, maybe repeated.  The distance from the newest databases are used."
                          "If file ends in .mod, its assumes to be a phastCons model file, otherwise a newick tree file ")
        (opts, args) = parser.parse_args()
        if len(args) != 3:
            parser.error("wrong number of arguments")
        (self.genomeDefsPickle, self.newickFileList, self.reportTsv) = args
        self.__dict__.update(opts.__dict__)

class Tree(object):
    def __init__(self, treeFile):
        self.treeFile = treeFile
        self.tree = phyloTreeOps.load(treeFile)
        self.dbPairs = set() # indexed by (db1, db2), both directions inserted
        self.orgPairs = set() # indexed by (org1, org2), both directions inserted
        self.__loadPairs()

    def __loadPairs(self):
        leafs = [tree.node(i) for i in tree.get_terminals()]
        for l1 in leafs:
            for l2 in leafs:
                if l1 != l2:
                    self.__addPair(l1.data.taxon, l2.data.taxon)

    def __addPair(self, db1, db2):
        org1 = GenomeDb.dbParse(db1)[0]
        org2 = GenomeDb.dbParse(db2)[0]
        self.dbPairs.add((db1, db2))
        self.dbPairs.add((db2, db1))
        self.orgPairs.add((org1, org2))
        self.orgPairs.add((org2, org1))

class Trees(object):
    def __init__(self, newickFileList):
        self.trees = []
        for treeFile in fileOps.readFileLines(newickFileList):
            self.trees.append(Tree(treeFile))


opts = CmdOpts()
genomeDefs = GenomeDefs.load(genomeDefsPath)

