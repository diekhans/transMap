#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import sqlite3
import argparse
from transMap import getChromSizes
from transMap.genomeDefs import AnnSetType
from transMap.transMapLite import SourceDbTables, TransMapSrcXRefLite
from pycbio.sys import fileOps
from pycbio.hgdata.hgLite import SequenceLite, PslLite
import pipettor

verbose = False


def parseArgs():
    desc = """Obtain RNA sequence file for UCSC GenBank alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--verbose", action="store_true", default=False,
                        help="""verbose tracing""")
    parser.add_argument("srcHgDb",
                        help="""Genome database for assembly""")
    parser.add_argument("annSetType", choices=(AnnSetType.mrna, AnnSetType.splicedEst, AnnSetType.refSeq), type=AnnSetType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset; must have srcAligns table loaded with alignments""")
    return parser.parse_args()


def getSrcAccs(transMapSrcDbConn, accvFh):
    for accv in TransMapSrcXRefLite(transMapSrcDbConn, SourceDbTables.srcXRefTbl).getAccvs():
        accvFh.write("{}\n".format(accv))


def getSrcAccsFile(annSetType, transMapSrcDbConn):
    tmpAccvFile = fileOps.tmpFileGet("transMap.{}.".format(annSetType), ".acc")
    with open(tmpAccvFile, "w") as accvFh:
        getSrcAccs(transMapSrcDbConn, accvFh)
    return tmpAccvFile


def getSeqFasta(srcHgDb, annSetType, tmpAccFile):
    "get fasta file"
    tmpSeqFa = fileOps.tmpFileGet("transMap.{}.".format(annSetType), ".fa")
    getRnaCmd = ("getRna", "-inclVer", "hgFixed", tmpAccFile, "/dev/stdout")
    srcDbCmd = ("awk", "-v", "srcDb={}".format(srcHgDb),
                '''/^>/{$0 = ">" srcDb ":" substr($0, 2)} {print $0}''')
    cmds = [getRnaCmd, srcDbCmd]
    pipettor.run(cmds, stdout=tmpSeqFa)
    return tmpSeqFa


def getSeqSizes(annSetType, tmpSeqFa):
    tmpSeqSizes = fileOps.tmpFileGet("transMap.{}.".format(annSetType), ".sizes")
    faSizeCmd = ("faSize", "-detailed", tmpSeqFa)
    pipettor.run(faSizeCmd, stdout=tmpSeqSizes)
    return tmpSeqSizes


def getPsls(transMapSrcDbConn, pslFh):
    srcAlignTbl = PslLite(transMapSrcDbConn, SourceDbTables.srcAlignsTbl)
    for row in srcAlignTbl.query("SELECT {} FROM {{table}};".format(PslLite.columnsNamesStr)):
        fileOps.prRow(pslFh, row)


def getPslFile(annSetType, transMapSrcDbConn):
    tmpPslFile = fileOps.tmpFileGet("transMap.{}.".format(annSetType), ".psl")
    with open(tmpPslFile, "w") as pslFh:
        getPsls(transMapSrcDbConn, pslFh)
    return tmpPslFile


def checkPslWithFasta(srcHgDb, tmpPslFile, tmpSeqFa, tmpSeqSizes):
    pslCheckCmd = ("pslCheck", "-ignoreQUniq",
                   "-querySizes={}".format(tmpSeqSizes),
                   "-targetSizes={}".format(getChromSizes(srcHgDb)),
                   tmpPslFile)
    pipettor.run((pslCheckCmd,), stderr=None)


def loadSeqFa(tmpSeqFa, transMapSrcDbConn):
    seqTbl = SequenceLite(transMapSrcDbConn, SourceDbTables.srcSeqTbl, True)
    seqTbl.loadFastaFile(tmpSeqFa)
    seqTbl.index()


def getGenbankSeqs(srcHgDb, annSetType, transMapSrcDb):
    transMapSrcDbConn = sqlite3.connect(transMapSrcDb)
    tmpAccFile = getSrcAccsFile(annSetType, transMapSrcDbConn)
    tmpSeqFa = getSeqFasta(srcHgDb, annSetType, tmpAccFile)
    tmpPslFile = getPslFile(annSetType, transMapSrcDbConn)
    tmpSeqSizes = getSeqSizes(annSetType, tmpSeqFa)
    checkPslWithFasta(srcHgDb, tmpPslFile, tmpSeqFa, tmpSeqSizes)
    loadSeqFa(tmpSeqFa, transMapSrcDbConn)
    transMapSrcDbConn.close()
    fileOps.rmFiles(tmpAccFile, tmpSeqFa, tmpPslFile, tmpSeqSizes)

# entry
opts = parseArgs()
getGenbankSeqs(opts.srcHgDb, opts.annSetType, opts.transMapSrcDb)
