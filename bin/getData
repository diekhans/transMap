#!/usr/bin/env python

import sys, os
rootDir = os.path.normpath(os.path.dirname(os.path.dirname(sys.argv[0])))
sys.path.extend((rootDir+"/extern/pycbio/lib", rootDir+"/lib/py", rootDir+"/rules"))
from transMap import TransMap,GenomeDefs, MappingDefs
from transMap.MappingDefs import MappingDefs
from pycbio.exrun import ExRun, Verb
from pycbio.sys import fileOps, procOps
from optparse import OptionParser
import CDnaData

class CmdLine(object):
    usage="""%prog [options] genomeDefsPickle mappingsInfo"""
    def __init__(self):
        parser = OptionParser(usage=CmdLine.usage)
        MappingDefs.addOptions(parser)
        (opts, args) = parser.parse_args()
        if len(args) != 2:
            parser.error("wrong number of arguments")
        (self.genomeDefsPickle, self. mappingsInfo) = args
        self.__dict__.update(opts.__dict__)


def dumpMappings(infoFile, mdefs):
    fh = open(infoFile, "w")
    for chains in mdefs.allMappings:
        fh.write(str(chains))
        if chains not in mdefs.mappings.chainsMap:
            fh.write("\tSKIPPED:")
            if chains.orient == GenomeDefs.ChainOrient.rev:
                fh.write(" reverse")
            if not chains.haveChainFile():
                fh.write(" noChains")
            if not chains.haveNetFile():
                fh.write(" noNets")
        fh.write('\n')
    fh.close()

# entry
opts = CmdLine()
mdefs = MappingDefs(opts, inclAllMappings=True);
dumpMappings(opts.mappingsInfo, mdefs)

exrun = ExRun()
exrun.verb.flags.add(Verb.details)
transMap = TransMap.TransMap(exrun, mdefs.defs, ".", mdefs.mappings)
for srcDb in mdefs.mappings.srcDbs:
    CDnaData.createRules(transMap, srcDb)
exrun.run()
