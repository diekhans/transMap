#!/usr/bin/env python
import sys, os
rootDir = os.path.normpath(os.path.dirname(os.path.dirname(sys.argv[0])))
sys.path.append(rootDir+"/extern/pycbio/lib")
from optparse import OptionParser
from pycbio.tsv.TSVTable import TSVTable
from pycbio.sys import fileOps
from pycbio.sys import Pipeline

class CmdLine(object):
    usage="""%prog [options] outTsv

Generate a TSV of the sizes of all transMap tables in all databases on the
current server.
"""
    def __init__(self):
        parser = OptionParser(usage=CmdLine.usage)
        (opts, args) = parser.parse_args()
        if len(args) != 1:
            parser.error("wrong number of arguments")
        self.outTsv = args[0]
        self.__dict__.update(opts.__dict__)

class HgSqlTsv(TSVTable):
    def __init__(self, sql, db=None, typeMap=None, cmpFunc=None):
        cmd = ["hgsql", "-e", sql]
        if db != None:
            cmd.append(db)
        name = db if db != None else "<databaseless query>"
        TSVTable.__init__(self, name, typeMap=typeMap, allowEmpty=True, inFh=Pipeline.Pipeline(cmd))
        if cmpFunc != None:
            self.sort(cmp=cmpFunc)

def getTransMapTbl(host, db, tsvFh):
    # Name	Engine	Version	Row_format	Rows	Avg_row_length	Data_length	Max_data_length	Index_length	Data_free	Auto_increment	Create_time	Update_time	Check_time	Collation	Checksum	Create_options	Comment
    tbls = HgSqlTsv("show table status like \"transMap%\"", db,
                    typeMap={"Rows": int},
                    cmpFunc=lambda a,b: cmp(a.Name, b.Name))
    for tbl in tbls:
        fileOps.prRowv(tsvFh, host, db, tbl.Name, tbl.Rows)

def getTransMapTbls(tsvFh):
    host = os.uname()[1]
    databases = HgSqlTsv("show databases", cmpFunc=lambda a,b: cmp(a.Database, b.Database))
    fileOps.prRowv(tsvFh, "host", "database", "table", "rows")
    for db in databases:
        getTransMapTbl(host, db, tsvFh)

opts = CmdLine()
with open(opts.outTsv, "w") as tsvFh:
    getTransMapTbls(tsvFh)

