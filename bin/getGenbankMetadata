#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import argparse
import sqlite3
from transMap import parseAccVer
from transMap.genomeDefs import AnnSetType
from transMap.transMapLite import SourceDbTables, TransMapGene, TransMapGeneLite, getTransMapSrcAccs
from pycbio.hgdata import hgDb

verbose = False


def parseArgs():
    desc = """Obtain metadata for UCSC GenBank alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--verbose", action="store_true", default=False,
                        help="""verbose tracing""")
    parser.add_argument("srcHgDbName",
                        help="""Genome database for assembly""")
    parser.add_argument("annSetType", choices=(AnnSetType.mrna, AnnSetType.refSeq), type=AnnSetType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset; must have srcAligns table loaded with alignments""")
    opts = parser.parse_args()
    global verbose
    verbose = opts.verbose
    return opts


def valOrNone(val):
    return None if (val == "") or (val == "n/a") else val


def getRefSeqMetaAcc(hgCur, srcHgDbName, accVer):
    acc, ver = parseAccVer(accVer)
    sql = """select gb.acc as gb_acc, cds.name as cds_name, gb.version as gb_version, rl.name as rl_name, rl.locusLinkId as rl_locusLinkId from """\
          """ refLink rl, gbCdnaInfo gb, cds where (gb.acc = rl.mrnaAcc) and (cds.id = gb.cds) and (gb.acc = %s)"""
    hgCur.execute(sql, (acc,))
    row = hgCur.fetchone()
    if row is None:
        raise Exception("accession {} not found in refLink and gbCdnaInfo".format(acc))
    if str(row["gb_version"]) != ver:
        raise Exception("accession version {} does not match database {}.{}".format(accVer, acc, row["gb_version"]))
    return TransMapGene("{}:{}".format(srcHgDbName, accVer),
                        valOrNone(row["cds_name"]), srcHgDbName,
                        valOrNone(row["rl_name"]), str(row["rl_locusLinkId"]))


def getRefSeqMeta(hgCur, srcHgDbName, accVers):
    return [getRefSeqMetaAcc(hgCur, srcHgDbName, accVer) for accVer in accVers]


def getMRnaMetaAcc(hgCur, srcHgDbName, accVer):
    acc, ver = parseAccVer(accVer)
    sql = """select gb.acc, cds.name as cdsName, gb.version, gn.name as gnName from """\
          """  gbCdnaInfo gb, cds, geneName gn where (cds.id = gb.cds) and (gn.id = gb.geneName) and (gb.acc = %s)"""
    hgCur.execute(sql, (acc,))
    row = hgCur.fetchone()
    if row is None:
        raise Exception("accession {} not found in gbCdnaInfo".format(acc))
    if str(row["version"]) != ver:
        raise Exception("accession version {} does not match database {}.{}".format(accVer, acc, row["version"]))
    return TransMapGene("{}:{}".format(srcHgDbName, accVer),
                        valOrNone(row["cdsName"]), srcHgDbName,
                        valOrNone(row["gnName"]), None)


def getMRnaMeta(hgCur, srcHgDbName, accVers):
    return [getMRnaMetaAcc(hgCur, srcHgDbName, accVer) for accVer in accVers]


def getMetaData(srcHgDbName, annSetType, accVers):
    hgConn = hgDb.connect(srcHgDbName, dictCursor=True)
    hgCur = hgConn.cursor()
    try:
        if annSetType == AnnSetType.refSeq:
            return getRefSeqMeta(hgCur, srcHgDbName, accVers)
        else:
            return getMRnaMeta(hgCur, srcHgDbName, accVers)
    finally:
        hgCur.close()
        hgConn.close()


def loadMetadata(srcDbConn, metaData):
    transMapGeneTbl = TransMapGeneLite(srcDbConn, SourceDbTables.srcMetaDataTbl, True)
    transMapGeneTbl.loads(metaData)
    transMapGeneTbl.index()


def getGenbankMetaData(srcHgDbName, annSetType, transMapSrcDb):
    srcDbConn = sqlite3.connect(transMapSrcDb)
    accVers = getTransMapSrcAccs(srcDbConn)
    metaData = getMetaData(srcHgDbName, annSetType, accVers)
    loadMetadata(srcDbConn, metaData)
    srcDbConn.close()

opts = parseArgs()
getGenbankMetaData(opts.srcHgDbName, opts.annSetType, opts.transMapSrcDb)
