#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import sqlite3
import argparse
from transMap import getChromSizes
from transMap.genomeDefs import AnnSetType
from transMap.transMapLite import SourceDbTables
from pycbio.sys import fileOps
from pycbio.hgdata.hgLite import SequenceLite, PslLite
import pipettor

verbose = False


def parseArgs():
    desc = """Validate a transmap source sqlite3 database
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--verbose", action="store_true", default=False,
                        help="""verbose tracing""")
    parser.add_argument("srcHgDb", help="""Genome database for assembly""")
    parser.add_argument("annSetType", choices=(AnnSetType.rna, AnnSetType.est, AnnSetType.refseq, AnnSetType.gencode, AnnSetType.ensembl), type=AnnSetType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset""")
    return parser.parse_args()


def getSeqSizes(transMapSrcDbConn, seqSizesFh):
    srcSeqTbl = SequenceLite(transMapSrcDbConn, SourceDbTables.srcSeqTbl)
    sql = "SELECT name, length(seq) FROM {table}"
    for row in srcSeqTbl.query(sql):
        fileOps.prRow(seqSizesFh, row)


def getSeqSizesFile(srcHgDb, annSetType, transMapSrcDbConn):
    tmpSeqSizes = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annSetType), ".sizes")
    with open(tmpSeqSizes, "w") as seqSizesFh:
        getSeqSizes(transMapSrcDbConn, seqSizesFh)
    return tmpSeqSizes


def writeSrcPsls(transMapSrcDbConn, pslFh):
    srcAlignTbl = PslLite(transMapSrcDbConn, SourceDbTables.srcAlignTbl)
    for row in srcAlignTbl.query("SELECT {} FROM {{table}};".format(PslLite.columnsNamesSql)):
        fileOps.prRow(pslFh, row)


def getPslFile(srcHgDb, annSetType, transMapSrcDbConn):
    tmpPslFile = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annSetType), ".psl")
    with open(tmpPslFile, "w") as pslFh:
        writeSrcPsls(transMapSrcDbConn, pslFh)
    return tmpPslFile


def pslCheck(srcHgDb, tmpPslFile, tmpSeqSizes):
    pslCheckCmd = ("pslCheck", "-ignoreQUniq",
                   "-querySizes={}".format(tmpSeqSizes),
                   "-targetSizes={}".format(getChromSizes(srcHgDb)),
                   tmpPslFile)
    pipettor.run((pslCheckCmd,), stderr=None)


def checkAlignments(srcHgDb, annSetType, transMapSrcDbConn):
    tmpPslFile = getPslFile(srcHgDb, annSetType, transMapSrcDbConn)
    tmpSeqSizes = getSeqSizesFile(srcHgDb, annSetType, transMapSrcDbConn)
    pslCheck(srcHgDb, tmpPslFile, tmpSeqSizes)
    fileOps.rmFiles(tmpPslFile, tmpSeqSizes)


def checkZeroCount(transMapSrcDbConn, sql):
    cur = transMapSrcDbConn.cursor()
    cur.execute(sql)
    row = cur.fetchone()
    if row[0] != 0:
        raise Exception("Expected 0 matching rows, got {} from {}".format(row[0], sql))
    cur.close()


def checkXRef(transMapSrcDbConn):
    sql = """SELECT count(*) FROM {srcXRefTbl} """ \
          """WHERE srcAlignId NOT IN (SELECT qName FROM {srcAlignTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                                  srcAlignTbl=SourceDbTables.srcAlignTbl)
    checkZeroCount(transMapSrcDbConn, sql)
    sql = """SELECT count(*) FROM {srcAlignTbl} """ \
          """WHERE qName NOT IN (SELECT srcAlignId FROM {srcXRefTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                                srcAlignTbl=SourceDbTables.srcAlignTbl)
    checkZeroCount(transMapSrcDbConn, sql)

def checkMetadata(transMapSrcDbConn):
    sql = """SELECT count(*) FROM {srcXRefTbl} """ \
          """WHERE srcId NOT IN (SELECT srcId FROM {srcMetadataTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                               srcMetadataTbl=SourceDbTables.srcMetadataTbl)
    checkZeroCount(transMapSrcDbConn, sql)
    sql = """SELECT count(*) FROM {srcXRefTbl} """ \
          """WHERE srcId NOT IN (SELECT srcId FROM {srcMetadataTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                               srcMetadataTbl=SourceDbTables.srcMetadataTbl)
    checkZeroCount(transMapSrcDbConn, sql)


def checkTransMapSrcDb(srcHgDb, annSetType, transMapSrcDb):
    transMapSrcDbConn = sqlite3.connect(transMapSrcDb)
    checkAlignments(srcHgDb, annSetType, transMapSrcDbConn)
    checkXRef(transMapSrcDbConn)
    if annSetType != AnnSetType.est:
        checkMetadata(transMapSrcDbConn)
    transMapSrcDbConn.close()

# entry
opts = parseArgs()
checkTransMapSrcDb(opts.srcHgDb, opts.annSetType, opts.transMapSrcDb)
