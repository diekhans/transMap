#!/usr/bin/env python

from __future__ import print_function
import transMapProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from transMap.transMapConf import transMapConfLoad
from transMap.genomeData import Genomes


def parseArgs():
    desc = """Get information about the state of transmap give
    a genome database.
    """
    parser = argparse.ArgumentParser(description=desc)
    transMapProgSetup.addCmdOptions(parser)
    parser.add_argument("configPyFile",
                        help="""configuration python file""")
    parser.add_argument("outTsv",
                        help="""write results to this file""")
    opts = parser.parse_args()
    transMapProgSetup.setupFromCmd(opts)
    return opts

header = ("srcHgDb", "srcCommonName", "srcScientificName",
          "destHgDb", "destCommonName", "destScientificName",
          "state", "annotationType", "chainType")


def getState(conf, mapping):
    if os.path.exists(conf.getMappedBigPslFileForDestHgDb(mapping.destHgDb, mapping.annotationType)):
        return "exists"
    else:
        return "needed"


def writeTransMapMapping(conf, outFh, genomes, mapping):
    srcAsm = genomes.genomeAsms[mapping.srcHgDb]
    destAsm = genomes.genomeAsms[mapping.destHgDb]
    fileOps.prRowv(outFh,
                   mapping.srcHgDb, srcAsm.commonName, srcAsm.scientificName,
                   mapping.destHgDb, destAsm.commonName, destAsm.scientificName,
                   mapping.annotationType, getState(conf, mapping),
                   mapping.chains.chainType)


def writeTransMapInfo(conf, outFh, genomes):
    fileOps.prRow(outFh, header)
    for mapping in genomes.getCandidateMappings():
        writeTransMapMapping(conf, outFh, genomes, mapping)


def transMapInfo(opts):
    conf = transMapConfLoad(opts.configPyFile)
    genomes = Genomes(conf)
    with open(opts.outTsv, "w") as outFh:
        writeTransMapInfo(conf, outFh, genomes)


# entry
transMapInfo(parseArgs())
