#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import argparse
import sqlite3
from transMap.genomeDefs import AnnSetType
from transMap.srcData import SourceDbTables, TransMapSrcGeneLite, TransMapSrcAlignLite
from transMap.genbank import GenbankHgData

verbose = False


def parseArgs():
    desc = """Obtain metadata for UCSC GenBank alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--verbose", action="store_true", default=False,
                        help="""verbose tracing""")
    parser.add_argument("--testLimit", action="store_true", default=False,
                        help="""limit to alignments that are in srcAlign table for testing""")
    parser.add_argument("srcHgDb",
                        help="""Genome database for assembly""")
    parser.add_argument("annSetType", choices=(AnnSetType.rna, AnnSetType.refseq), type=AnnSetType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset; must have srcAlign table loaded with alignments""")
    opts = parser.parse_args()
    global verbose
    verbose = opts.verbose
    return opts


def getTestLimitAcc(transMapSrcDbConn):
    return TransMapSrcAlignLite(transMapSrcDbConn, SourceDbTables.srcAlignTbl).getAllAcc()


def getGenbankMetadata(srcHgDb, annSetType, transMapSrcDb, testLimit):
    genbankHgData = GenbankHgData(srcHgDb, annSetType)
    transMapSrcDbConn = sqlite3.connect(transMapSrcDb)
    try:
        testAccvSubset = getTestLimitAcc(transMapSrcDbConn) if testLimit else None
        metadataReader = genbankHgData.metadataReader(testAccvSubset)
        TransMapSrcGeneLite.loadStep(transMapSrcDbConn, metadataReader)
    finally:
        transMapSrcDbConn.close()

opts = parseArgs()
getGenbankMetadata(opts.srcHgDb, opts.annSetType, opts.transMapSrcDb, opts.testLimit)
