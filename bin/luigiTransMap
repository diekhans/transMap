#!/usr/bin/env python3

import transMapProgSetup  # noqa: F401
import os
import sys
import pickle
import argparse
import base64
from collections import defaultdict
from pycbio.sys import fileOps
from transMap.transMapConf import transMapConfLoad
from transMap.genomeData import Genomes, AnnotationType, mappingsFilter
import pipettor
import luigi
from luigi.execution_summary import LuigiStatusCode


def parseArgs():
    desc = """
    Run transmap mapping for genome browser databases using Luigi
    """
    parser = argparse.ArgumentParser(description=desc)
    transMapProgSetup.addCmdOptions(parser)
    parser.add_argument("--destHgDb", action="append", default=None, dest="destHgDbSubset",
                        help="""limit to these destination databases for testing, maybe repeated""")
    parser.add_argument("--srcHgDb", action="append", default=None, dest="srcHgDbSubset",
                        help="""limit to these sources databases for testing, maybe repeated""")
    parser.add_argument("--rebuildGenomeDb", action="store_true", default=False,
                        help="""rebuild the genome database, picking up any changes""")
    parser.add_argument("--workers", default=2, type=int,
                        help="""number of work processes""")
    parser.add_argument("configPyFile",
                        help="""configuration python file""")
    opts = parser.parse_args()
    transMapProgSetup.setupFromCmd(opts)
    if (opts.destHgDbSubset is None) ^ (opts.srcHgDbSubset is None):
        parser.error("must specify either both or neither of --destHgDb and --srcHgDb")
    return opts


def noneIfEmpty(v):
    return v if len(v) > 0 else None


def emptyListIfNone(v):
    return [] if v is None else list(v)


class AnnotationTypeParameter(luigi.Parameter):
    def parse(self, s):
        return AnnotationType(s)


class AnnotationTypeListParameter(luigi.Parameter):
    def parse(self, s):
        return list(map(AnnotationType, s))


class MappingParameter(luigi.Parameter):
    # FIXME; dumps creates a byte array, which can't be json serialized, so convert to base64.
    def serialize(self, mapping):
        return base64.standard_b64encode(pickle.dumps(mapping, 0)).decode("utf-8")

    def parse(self, s):
        return pickle.loads(base64.standard_b64decode(s).encode('utf-8'))


class MappingListParameter(luigi.Parameter):
    def serialize(self, mappings):
        return base64.standard_b64encode(pickle.dumps(mappings, 0)).decode("utf-8")

    def parse(self, s):
        return pickle.loads(base64.standard_b64decode(s).encode('utf-8'))


class SrcDataTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.Parameter()
    srcHgDb = luigi.Parameter()
    annotationType = AnnotationTypeParameter()

    def __init__(self, *args, **kwargs):
        super(SrcDataTask, self).__init__(*args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, srcHgDb=self.srcHgDb, annotationType=self.annotationType)

    def _runCmd(self, prog, srcDbTmp):
        pipettor.run([os.path.join(self.conf.binDir, prog), self.srcHgDb, self.annotationType, srcDbTmp])

    def _ensemblProgs(self):
        return ["srcDbLoadEnsemblAligns",
                "srcDbLoadEnsemblMetadata",
                "srcDbLoadEnsemblSeqs",
                "srcDbCheck"]

    def _genbankProgs(self):
        cmds = ["srcDbLoadGenbankAligns"]
        if self.annotationType != AnnotationType.est:
            cmds.append("srcDbLoadGenbankMetadata")
        cmds.extend(["srcDbLoadGenbankSeqs",
                     "srcDbCheck"])
        return cmds

    def run(self):
        with fileOps.AtomicFileCreate(self.conf.srcDb) as srcDbTmp:
            progs = self._ensemblProgs() if self.annotationType in (AnnotationType.ensembl,) else self._genbankProgs()
            for prog in progs:
                self._runCmd(prog, srcDbTmp)

    def output(self):
        return luigi.LocalTarget(self.conf.srcDb)


class MappingChainBuildTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.Parameter()
    mapping = MappingParameter()

    def __init__(self, *args, **kwargs):
        super(MappingChainBuildTask, self).__init__(*args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, srcHgDb=self.mapping.srcHgDb, destHgDb=self.mapping.destHgDb,
                                     chainType=self.mapping.chains.chainType)

    def run(self):
        with fileOps.AtomicFileCreate(self.conf.mappingChains) as mappingChainsTmp:
            mappingChainsIndexDbTmp = "{}.db".format(mappingChainsTmp)
            pipettor.run([os.path.join(self.conf.binDir, "mappingChainBuild"),
                          self.conf.genomeDb, self.mapping.srcHgDb, self.mapping.destHgDb,
                          self.mapping.chains.chainType, mappingChainsTmp])
            fileOps.atomicInstall(mappingChainsIndexDbTmp, "{}.db".format(self.conf.mappingChains))

    def output(self):
        return luigi.LocalTarget(self.conf.mappingChains)


class TransMapBatchTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.Parameter()
    mapping = MappingParameter()

    def __init__(self, *args, **kwargs):
        super(TransMapBatchTask, self).__init__(*args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, srcHgDb=self.mapping.srcHgDb, destHgDb=self.mapping.destHgDb,
                                     chainType=self.mapping.chains.chainType,
                                     annotationType=self.mapping.annotationType)

    def run(self):
        # transMapBatch handles atomic file
        pipettor.run([os.path.join(self.conf.binDir, "transMapBatch"),
                      self.configPyFile, self.mapping.srcHgDb, self.mapping.destHgDb,
                      self.mapping.annotationType, self.mapping.chains.chainType])

    def requires(self):
        return [SrcDataTask(configPyFile=self.configPyFile,
                            srcHgDb=self.mapping.srcHgDb,
                            annotationType=self.mapping.annotationType),
                MappingChainBuildTask(configPyFile=self.configPyFile,
                                      mapping=self.mapping)]

    def output(self):
        return luigi.LocalTarget(self.conf.getBatchSrcHgDbPreBigPsl(self.mapping.srcHgDb))


class TransMapBuildBigPslTask(luigi.Task):
    """This runs, but is a no-op if output exists.  This allows it to be used as a dependency
    for detailed statistic"""
    task_namespace = 'transmap'
    configPyFile = luigi.Parameter()
    destHgDb = luigi.Parameter()
    annotationType = AnnotationTypeParameter()
    mappings = MappingListParameter()

    def __init__(self, *args, **kwargs):
        super(TransMapBuildBigPslTask, self).__init__(*args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, destHgDb=self.destHgDb,
                                     annotationType=self.annotationType)

    def _mappingExists(self):
        "true if it's there, false if not"
        return os.path.exists(self.conf.getMappedBigPslFileForDestHgDb(self.destHgDb, self.annotationType))

    def run(self):
        # transMapBuildBigPsl handles atomic install
        pipettor.run([os.path.join(self.conf.binDir, "transMapBuildBigPsl"),
                      self.configPyFile, self.destHgDb,
                      self.annotationType] + list(getMappingsSrcHgDbs(self.mappings)))

    def requires(self):
        # chain type is not significant.  Ensembl and gencode
        # get combined at this point
        if self._mappingExists():
            return []   # mapping already exists
        else:
            return [TransMapBatchTask(configPyFile=self.configPyFile,
                                      mapping=mapping)
                    for mapping in self.mappings]

    def output(self):
        return luigi.LocalTarget(self.conf.mappedBigPslFile)


class TransMapDetailedStatsTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.Parameter()
    destHgDb = luigi.Parameter()
    mappings = MappingListParameter()

    def __init__(self, *args, **kwargs):
        super(TransMapDetailedStatsTask, self).__init__(*args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, destHgDb=self.destHgDb)

    def run(self):
        fileOps.ensureFileDir(self.conf.detailedStatsTsv)
        with fileOps.AtomicFileCreate(self.conf.detailedStatsTsv) as detailedStatsTsvTmp:
            pipettor.run([os.path.join(self.conf.binDir, "transMapDetails"),
                          self.configPyFile, self.destHgDb, detailedStatsTsvTmp])

    def requires(self):
        yield from getDestHgDbBigPslTasks(self.conf, self.destHgDb, self.mappings)

    def output(self):
        return luigi.LocalTarget(self.conf.detailedStatsTsv)


class TransMapOverallStatsTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.Parameter()
    mappings = MappingListParameter()

    def __init__(self, *args, **kwargs):
        super(TransMapOverallStatsTask, self).__init__(*args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile)

    def run(self):
        fileOps.ensureFileDir(self.conf.overallStatsTsv)
        with fileOps.AtomicFileCreate(self.conf.overallStatsTsv) as overallStatsTsvTmp:
            pipettor.run([os.path.join(self.conf.binDir, "transMapStats"),
                          self.configPyFile, overallStatsTsvTmp])

    def requires(self):
        for mapping in self.mappings:
            yield from getDestHgDbBigPslTasks(self.conf, mapping.destHgDb, self.mappings)

    def output(self):
        return luigi.LocalTarget(self.conf.overallStatsTsv)


def splitMappingsByDestDb(mappings):
    "return mapping split by destDb"
    mappingsByDestDb = defaultdict(list)
    for mapping in mappings:
        mappingsByDestDb[mapping.destHgDb].append(mapping)
    return mappingsByDestDb


def splitMappingsByAnnotType(mappings):
    "return mapping split by annotation type"
    mappingsByAnnotType = defaultdict(list)
    for mapping in mappings:
        mappingsByAnnotType[mapping.annotationType].append(mapping)
    return mappingsByAnnotType


def getMappingsSrcHgDbs(mappings):
    return frozenset([m.srcHgDb for m in mappings])


def genomeDbBuild(conf, opts):
    cmd = [os.path.join(conf.binDir, "genomeDbLoad"), conf.configPyFile]
    if opts.destHgDbSubset is not None:
        # restrict to test database to speed up
        cmd += ["--hgDb={}".format(db) for db in opts.destHgDbSubset + opts.srcHgDbSubset]
    pipettor.run(cmd)


def genomeDbSetup(conf, opts):
    "need genomeDb to define tasks, so just build now"
    if opts.rebuildGenomeDb and os.path.exists(conf.genomeDb):
        os.unlink(conf.genomeDb)
    if not os.path.exists(conf.genomeDb):
        genomeDbBuild(conf, opts)


def getDestHgDbBigPslTasks(conf, destHgDb, mappings):
    mappingsByAnnotType = splitMappingsByAnnotType(mappings)
    for annotationType in mappingsByAnnotType.keys():
        yield TransMapBuildBigPslTask(configPyFile=conf.configPyFile,
                                      destHgDb=destHgDb,
                                      annotationType=annotationType,
                                      mappings=mappingsByAnnotType[annotationType])


def getDestHgDbMappingTasks(conf, destHgDb, mappings):
    srcHgDbs = set()

    # batches
    for mapping in mappings:
        srcHgDbs.add(mapping.srcHgDb)
        yield TransMapBatchTask(configPyFile=conf.configPyFile, mapping=mapping)

    # combine into big psls
    yield from getDestHgDbBigPslTasks(conf, destHgDb, mappings)

    # build details stats
    yield TransMapDetailedStatsTask(configPyFile=conf.configPyFile,
                                    destHgDb=destHgDb, mappings=mappings)


def getMappingTasks(conf, mappingsByDestDb):
    for destHgDb in mappingsByDestDb.keys():
        for task in getDestHgDbMappingTasks(conf, destHgDb, mappingsByDestDb[destHgDb]):
            yield task


class StartTask(luigi.WrapperTask):
    task_namespace = 'transmap'
    configPyFile = luigi.Parameter()
    srcHgDbSubset = luigi.ListParameter()
    destHgDbSubset = luigi.ListParameter()

    def run(self):
        pass

    def requires(self):
        conf = transMapConfLoad(self.configPyFile)
        genomes = Genomes(conf)
        mappings = mappingsFilter(genomes.getCandidateMappings(),
                                  noneIfEmpty(self.srcHgDbSubset),
                                  noneIfEmpty(self.destHgDbSubset))
        mappingsByDestDb = splitMappingsByDestDb(mappings)
        for task in getMappingTasks(conf, mappingsByDestDb):
            yield task

        # requires everything
        yield TransMapOverallStatsTask(configPyFile=conf.configPyFile, mappings=mappings)


def checkResults(results):
    if results.status not in (LuigiStatusCode.SUCCESS, LuigiStatusCode.SUCCESS_WITH_RETRY):
        print("Error: some tasks not successful: " + results.summary_text, file=sys.stderr)
        exit(1)


def luigiTransMap(opts):
    conf = transMapConfLoad(opts.configPyFile)
    genomeDbSetup(conf, opts)

    loggingKwargs = {}
    if opts.logConfFile is not None:
        loggingKwargs["logging_conf_file"] = opts.logConfFile

    # can't pass None for ListParameter, so pass empty list (FIXME)
    results = luigi.build([StartTask(configPyFile=opts.configPyFile,
                                     srcHgDbSubset=emptyListIfNone(opts.srcHgDbSubset),
                                     destHgDbSubset=emptyListIfNone(opts.destHgDbSubset))],
                          local_scheduler=True, workers=opts.workers, detailed_summary=True, **loggingKwargs)
    checkResults(results)


# entry
opts = parseArgs()
luigiTransMap(opts)
