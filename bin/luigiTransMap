#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import sys
import os
import argparse
import logging
from collections import defaultdict
from pycbio.sys import fileOps, loggingOps
from transMap.transMapConf import transMapConfLoad
from transMap.genomeData import Genomes, AnnotationType, ChainType
import pipettor
import luigi


def parseArgs():
    desc = """
    Run transmap mapping for genome browser databases using Luigi
    """
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument("--destHgDb", action="append", default=None, dest="destHgDbs",
                        help="""limit to these destination databases testing, maybe repeated""")
    parser.add_argument("--srcHgDb", action="append", default=None, dest="srcHgDbs",
                        help="""limit to these sources databases testing, maybe repeated""")
    parser.add_argument("--rebuildGenomeDb", action="store_true", default=False,
                        help="""rebuild the genome database, picking up any changes""")
    parser.add_argument("--workers", default=2, type=int,
                        help="""number of work processes""")
    parser.add_argument("configPyFile",
                        help="""configuration python file""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    if opts.srcHgDbs is not None:
        opts.srcHgDbs = frozenset(opts.srcHgDbs)
    if opts.destHgDbs is not None:
        opts.destHgDbs = frozenset(opts.destHgDbs)
    return opts


class AnnotationTypeParameter(luigi.Parameter):
    def parse(self, s):
        return AnnotationType(s)


class ChainTypeParameter(luigi.Parameter):
    def parse(self, s):
        return ChainType(s)


class SrcDataTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.StringParameter()
    srcHgDb = luigi.StringParameter()
    annotationType = luigi.AnnotationTypeParameter()

    def __init__(self, *args, **kwargs):
        super(SrcDataTask).__init__(self, *args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, srcHgDb=self.srcHgDb, annotationType=self.annotationType)

    def __runCmd(self, prog, srcDbTmp):
        pipettor([os.path.join(self.conf.binDir, prog), self.srcHgDb, self.annotationType, srcDbTmp],
                 logger=logging.getLogger())

    def __ensemblProgs(self):
        return ["srcDbLoadEnsemblAligns",
                "srcDbLoadEnsemblMetadata",
                "srcDbLoadEnsemblSeqs",
                "srcDbCheck"]

    def __genbankProgs(self):
        cmds = ["srcDbLoadGenbankAligns"]
        if self.annotationType != AnnotationType.est:
            cmds.append("srcDbLoadGenbankMetadata")
        cmds.extend(["srcDbLoadGenbankSeqs",
                     "srcDbCheck"])
        return cmds

    def run(self, progs):
        srcDbTmp = fileOps.atomicTmpFile(self.srcDb)
        progs = self.__ensemblProgs() if self.annotationType in (AnnotationType.ensembl, AnnotationType.gencode) else self.__genbankProgs()
        for prog in progs:
            self.__runCmd(prog, srcDbTmp)
        fileOps.atomicInstall(srcDbTmp, self.srcDb)

    def output(self):
        return luigi.LocalTarget(self.conf.srcDb)


class MappingChainBuildTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.StringParameter()
    srcHgDb = luigi.StringParameter()
    destHgDb = luigi.StringParameter()
    chainType = luigi.ChainTypeParameter()

    def __init__(self, *args, **kwargs):
        super(MappingChainBuildTask).__init__(self, *args, **kwargs)
        self.chainType = ChainType(self.chainType)
        self.conf = transMapConfLoad(self.configPyFile, srcHgDb=self.srcHgDb, destHgDb=self.destHgDb,
                                     chainType=self.chainType, annotationType=self.annotationType)

    def run(self):
        mappingChainsTmp = fileOps.atomicTmpFile(self.mappingChains)
        mappingChainsIndexDbTmp = "{}.db".format(mappingChainsTmp)

        pipettor.run([os.path.join(self.conf.binDir, "mappingChainBuild"),
                      self.conf.genomeDb, self.srcHgDb, self.destHgDb, self.chainType, mappingChainsTmp],
                     logger=logging.getLogger())

        fileOps.atomicInstall(mappingChainsIndexDbTmp, "{}.db".format(self.mappingChains))
        fileOps.atomicInstall(mappingChainsTmp, self.mappingChains)

    def output(self):
        return luigi.LocalTarget(self.conf.mappingChains)


class TransMapBatchTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.StringParameter()
    srcHgDb = luigi.StringParameter()
    destHgDb = luigi.StringParameter()
    annotationType = luigi.AnnotationTypeParameter()
    chainType = luigi.ChainTypeParameter()

    def __init__(self, *args, **kwargs):
        super(TransMapBatchTask).__init__(self, *args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, srcHgDb=self.srcHgDb, destHgDb=self.destHgDb,
                                     chainType=self.chainType,
                                     annotationType=self.annotationType)

    def run(self):
        mappingChainsTmp = fileOps.atomicTmpFile(self.mappingChains)
        mappingChainsIndexDbTmp = "{}.db".format(mappingChainsTmp)

        pipettor.run([os.path.join(self.conf.binDir, "transMapBatch"),
                      self.configPyFile, self.srcHgDb, self.destHgDb,
                      self.annotationType, self.chainType],
                     logger=logging.getLogger())

        fileOps.atomicInstall(mappingChainsIndexDbTmp, "{}.db".format(self.mappingChains))
        fileOps.atomicInstall(mappingChainsTmp, self.mappingChains)

    def requires(self):
        return [SrcDataTask(configPyFile=self.configPyFile,
                            srcHgDb=self.srcHgDb,
                            annotationType=self.annotationType),
                MappingChainBuildTask(configPyFile=self.configPyFile,
                                      srcHgDb=self.srcHgDb,
                                      destHgDb=self.destHgDb,
                                      chainType=self.chainType)]

    def output(self):
        return luigi.LocalTarget(self.conf.getBatchSrcHgDbPreBigPsl(self.srcHgDb))


class TransMapBuildBigPslTask(luigi.Task):
    task_namespace = 'transmap'
    configPyFile = luigi.StringParameter()
    destHgDb = luigi.ListParameter()
    annotationType = luigi.AnnotationTypeParameter()
    srcHgDbs = luigi.ListParameter()

    def __init__(self, *args, **kwargs):
        super(TransMapBuildBigPslTask).__init__(self, *args, **kwargs)
        self.conf = transMapConfLoad(self.configPyFile, destHgDb=self.destHgDb,
                                     annotationType=self.annotationType)

    def run(self):
        mappedBigPslFileTmp = fileOps.atomicTmpFile(self.mappedBigPslFile)

        pipettor.run([os.path.join(self.conf.binDir, "transMapBuildBigPsl"),
                      self.configPyFile, self.self.destHgDb,
                      self.annotationType] + list(self.srcHgDbs),
                     logger=logging.getLogger())

        fileOps.atomicInstall(mappedBigPslFileTmp, self.mappedBigPslFile)

    def requires(self):
        return [TransMapBatchTask(configPyFile=self.configPyFile,
                                  srcHgDb=srcHgDb,
                                  destHgDb=self.destHgDb,
                                  annotationType=self.annotationType,
                                  chainType=self.chainType)
                for srcHgDb in self.srcHgDbs]

    def output(self):
        return luigi.LocalTarget(self.conf.mappedBigPslFile)


def filterMappings(mappings, opts):
    "subset mappings based on command line srcHgDb/destHgDb restrictions"
    if opts.srcHgDbs is not None:
        mappings = [m for m in mappings if m.srcHgDb in opts.srcHgDbs]
    if opts.destHgDbs is not None:
        mappings = [m for m in mappings if m.destHgDb in opts.destHgDbs]
    return mappings


def splitMappings(mappings):
    "split by (descDb, annotationType)"
    mappingsSplit = defaultdict(list)
    for mapping in mappings:
        mappingsSplit[(mapping.destHgDb, mapping.annotationType)].append(mapping)
    return mappingsSplit


def genomeDbBuild(conf, opts):
    cmd = [os.path.join(conf.binDir, "genomeDbLoad")]
    if opts.srcHgDbs is not None:
        cmd += ["--hgDb={}".format(hgDb) for hgDb in opts.srcHgDbs]
    if opts.destHgDbs is not None:
        cmd += ["--hgDb={}".format(hgDb) for hgDb in opts.destHgDbs]
    cmd.append(opts.configPyFile)
    pipettor(cmd, logger=logging.getLogger())


def genomeDbSetup(conf, opts):
    "need genomeDb to define tasks, so just build now"
    if opts.rebuildGenomeDb and os.path.exists(conf.genoneDb):
        os.unlink(conf.genoneDb)
    if not os.path.exists(conf.genoneDb):
        genomeDbBuild(conf, opts)


def getMappingState(conf, mapping):
    "true if it's there, false if not"
    return os.path.exists(conf.getMappedBigPslFileForDestHgDb(mapping.destHgDb, mapping.annotationType))


def getDestHgDbAnnotationTypeMappingTasks(conf, mappings):
    for mapping in mappings:
        if not getMappingState(conf, mapping):
            yield TransMapBatchTask(configPyFile=conf.configPyFile,
                                    srcHgDb=mapping.srcHgDb,
                                    destHgDb=mappings.destHgDb,
                                    annotationType=mappings.annotationType),


def getMappingTasks(conf, mappingsSplit):
    tasks = []
    for mappings in mappingsSplit.itervalues():
        tasks.extend(getDestHgDbAnnotationTypeMappingTasks(conf, mappings))
    return tasks


def luigiTransMap(opts):
    conf = transMapConfLoad(opts.configPyFile)
    genomeDbSetup(conf, opts)
    genomes = Genomes(conf)
    mappingsSplit = splitMappings(filterMappings(genomes.getCurrentMappings(), opts))
    luigi.build(getMappingTasks(conf, mappingsSplit),
                local_scheduler=True, workers=opts.workers)

# entry
opts = parseArgs()
luigiTransMap(opts)
