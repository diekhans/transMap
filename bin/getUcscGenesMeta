#!/usr/bin/env python

import sys, os
rootDir = os.path.normpath(os.path.dirname(os.path.dirname(sys.argv[0])))
sys.path.append(rootDir+"/extern/pycbio/lib")
from pycbio.sys import fileOps, procOps
from pycbio.tsv import TabFileReader
from optparse import OptionParser


class CmdLine(object):
    usage="""%prog [options] db cdsFile metaOut"""
    def __init__(self):
        parser = OptionParser(usage=CmdLine.usage)
        (opts, args) = parser.parse_args()
        if len(args) != 3:
            parser.error("wrong number of arguments")
        (self.db, self.cdsFile, self.metaOut) = args
        self.__dict__.update(opts.__dict__)

class Meta(object):
    def __init__(self, id):
        self.id = id
        self.cds = ""
        self.gene = ""
        self.cat = "";

    def haveData(self):
        return (self.cds != "") or (self.gene != "") or (self.cat != "")

def getMeta(tbl, id):
    meta = tbl.get(id)
    if meta == None:
        meta = tbl[id] = Meta(id)
    return meta

# entry
opts = CmdLine()
tbl = dict()

# load CDS
for row in TabFileReader(opts.cdsFile, hashAreComments=True):
    meta = getMeta(tbl, row[0])
    meta.cds = row[1]

# read gene names from database
cmd = ["hgsql", "-Ne", "select kgID, geneSymbol from kgXref", opts.db]
for line in procOps.callProcLines(cmd):
    row = line.split("\t")
    meta = getMeta(tbl, row[0])
    meta.gene = row[1]

# read gene names from database
cmd = ["hgsql", "-Ne", "select kgID, geneSymbol from kgXref", opts.db]
for line in procOps.callProcLines(cmd):
    row = line.split("\t")
    meta = getMeta(tbl, row[0])
    meta.gene = row[1]

# read categories from database
cmd = ["hgsql", "-Ne", "select name, category from kgTxInfo", opts.db]
for line in procOps.callProcLines(cmd):
    row = line.split("\t")
    meta = getMeta(tbl, row[0])
    meta.cat = row[1]

# output
ids = list(tbl.iterkeys())
ids.sort()
fh = open(opts.metaOut, "w")
for id in ids:
    meta = tbl[id]
    if meta.haveData():
        fileOps.prRowv(fh, id, meta.cds, meta.gene, meta.cat)

fh.close()
