#!/usr/bin/env python

import sys, os
rootDir = os.path.normpath(os.path.dirname(os.path.dirname(sys.argv[0])))
sys.path.extend((rootDir+"/extern/pycbio/lib",
                 rootDir+"/lib/py", "rules"))
from transMap import TransMap,GenomeDefs
from pycbio.exrun import ExRun, Verb
from pycbio.sys import fileOps, procOps
from optparse import OptionParser
import CDnaData, PslMap

class CmdLine(object):
    usage="""%prog [options]"""
    def __init__(self):
        parser = OptionParser(usage=CmdLine.usage)
        parser.add_option("--noBuild", action="store_true", dest="noBuild", default=False,
                          help="""just generate mappings list, don't actually build anything""")
        parser.add_option("--graph", action="store", dest="graph", default=None,
                          help="""dump graph to this file""")
        (opts, args) = parser.parse_args()
        if len(args) != 0:
            parser.error("wrong number of arguments")
        self.__dict__.update(opts.__dict__)


def dumpMappings(infoFile, mappings, allMappings):
    fh = open(infoFile, "w")
    for chains in allMappings:
        fh.write(str(chains))
        if chains not in mappings.chainsMap:
            fh.write("\tSKIPPED:")
            if chains.orient == GenomeDefs.ChainOrient.rev:
                fh.write(" reverse")
            if not chains.haveChainFile():
                fh.write(" noChains")
            if not chains.haveNetFile():
                fh.write(" noNets")
        fh.write('\n')
    fh.close()
    

# entry
opts = CmdLine()

build = "mammal.2007-11-05"
buildDir = "builds/" + build
clades = ("mammal",)

onlyDestDbs = None
otherDestDbs = ("hg17", "mm8")

#onlyDestDbs = ("mm9",)
#otherDestDbs = None

# skipped:
#   canFam1 - oryCun1 blastz dir, but no chains/nets
skipDbs = ("venter1", "canFam1", )

fileOps.ensureDir(buildDir)


# FIXME: should make this a rule, but data needed to generate rules; test this later
genomeDefsPath= buildDir + "/genomeDefs.pickle"
if not os.path.exists(genomeDefsPath):
    cmd = ("./bin/genomeDefsMk", "--info="+buildDir + "/genomeDefs.info"
           , genomeDefsPath)
    fileOps.prsErr(" ".join(cmd))
    procOps.runProc(cmd)

genomeDefs = GenomeDefs.load(genomeDefsPath)
mappings = genomeDefs.getMappingSets(onlyDestDbs=onlyDestDbs,
                                     otherDestDbs=otherDestDbs, 
                                     clades=clades,
                                     skipDbs=skipDbs)
# so we can warn about these
allMappings = genomeDefs.getMappingSets(onlyDestDbs=onlyDestDbs,
                                        otherDestDbs=otherDestDbs, 
                                        clades=clades,
                                        skipDbs=skipDbs,
                                        inclMissingChains=True,
                                        inclRevChains=True)
dumpMappings(buildDir + "/mappings.info", mappings, allMappings)

if not opts.noBuild or (opts.graph != None):
    # build rules
    exrun = ExRun()
    exrun.verb.flags.add(Verb.details)
    transMap = TransMap.TransMap(exrun, genomeDefs, buildDir, mappings)


    for srcDb in mappings.srcDbs:
        CDnaData.createRules(transMap, srcDb)

    for chains in mappings:
        if chains.haveChainNet():
            PslMap.createRules(transMap, chains)
    if (opts.graph != None):
        fh = open(opts.graph, "w")
        exrun.dumpGraph(fh)
        fh.close()

if not opts.noBuild:
    exrun.run()
