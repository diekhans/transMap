#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import argparse
import sqlite3
from transMap.genomeDefs import AnnSetType
from transMap import alignIdToSrcId
from transMap.srcData import querySrcPsls, loadSeqFa
from pycbio.sys import fileOps
import pipettor


def parseArgs():
    desc = """Obtain RNA sequence file for the Ensembl and GENCODE alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("srcHgDb",
                        help="""Genome database for assembly""")
    parser.add_argument("annSetType", choices=(AnnSetType.ensembl, AnnSetType.gencode), type=AnnSetType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset; must have srcAlign table loaded with alignments""")
    return parser.parse_args()


def writeSrcPsls(transMapSrcDbConn, pslFh):
    done = set()
    for row in querySrcPsls(transMapSrcDbConn):
        qName = alignIdToSrcId(row[9])
        if qName not in done:
            row = row[0:9] + (qName,) + row[10:]
            fileOps.prRow(pslFh, row)
            done.add(qName)


def getSrcGenePred(srcHgDb, annSetType, transMapSrcDbConn):
    "get genePreds as a file, otherwise database connection might time out during processing"
    # use alignments rather than original genePreds so if they are filtered, it all bubbles down
    tmpSrcGp = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annSetType), ".gp")
    mrnaToGeneCmd = ("mrnaToGene", "-insertMergeSize=-1", "-noCds", "/dev/stdin", tmpSrcGp)
    with pipettor.Popen([mrnaToGeneCmd], "w") as pslFh:
        writeSrcPsls(transMapSrcDbConn, pslFh)
    return tmpSrcGp


def getSeqFasta(srcHgDb, annSetType, srcGp):
    "get fasta file"
    tmpSeqFa = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annSetType), ".fa")

    # already has srcId with srcHgDb in it!
    getRnaPredCmd = ("getRnaPred", srcHgDb, srcGp, "all", "/dev/stdout")
    pipettor.run([getRnaPredCmd], stdout=tmpSeqFa)
    return tmpSeqFa


def getEnsemblSeqs(srcHgDb, annSetType, transMapSrcDb):
    transMapSrcDbConn = sqlite3.connect(transMapSrcDb)
    tmpSrcGp = getSrcGenePred(srcHgDb, annSetType, transMapSrcDbConn)
    tmpSeqFa = getSeqFasta(srcHgDb, annSetType, tmpSrcGp)
    loadSeqFa(tmpSeqFa, transMapSrcDbConn)
    transMapSrcDbConn.close()
    fileOps.rmFiles(tmpSrcGp, tmpSeqFa)

# entry
opts = parseArgs()
getEnsemblSeqs(opts.srcHgDb, opts.annSetType, opts.transMapSrcDb)
