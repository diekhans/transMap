#!/usr/bin/env python

import transMapProgSetup
from optparse import OptionParser
from pycbio.sys import fileOps, procOps
from transMap import genomeData, setTMPDIR, getTmpExt, runCmds
from transMap.transMap import TransMap


class CmdOpts(object):
    usage = """%prog [options] genomeDataPickle srcDb destDb annSetType alnPslList clusterDir mappedPsl
"""
    def __init__(self):
        parser = OptionParser(usage=CmdOpts.usage)
        (opts, args) = parser.parse_args()
        if len(args) != 7:
            parser.error("wrong number of arguments")
        (self.genomeDataPickle, self.srcDb, self.destDb, self.annSetType, self.partsLst, self.clusterDir, self.mappedPsl) = args
        self.__dict__.update(opts.__dict__)

    def fixEnums(self):
        # FIXME: don't convert Enumerations until GenomeDefs is loaded
        self.annotationType = genomeData.AnnotationType(self.annotationType)

opts = CmdOpts()
# skip if already completed
if os.path.exists(opts.mappedPsl):
    sys.stderr.write("Note: output already exists, skipping: " + opts.mappedPsl + "\n")
    sys.exit(0)

def mkInFileLst(baseName, destDb, srcDb, annotationType, parts, mapFunc):
    inTmp = tmpDir + "/" + baseName + tmpExt
    fh = open(inTmp, "w")
    for p in parts:
        fh.write(mapFunc(destDb, srcDb, annotationType, p))
        fh.write("\n")
    fh.close()
    return inTmp
    

tmpDir = setTMPDIR()
tmpExt = getTmpExt()

gdefs = genomeData.load(opts.genomeDataPickle)
opts.fixEnums()
transMap = TransMap(None, genomeData, ".", None, opts.clusterDir)
srcDb = gdefs.dbs[opts.srcDb]
destDb = gdefs.dbs[opts.destDb]

# input
parts = fileOps.readFileLines(opts.partsLst)
inPslsTmp = mkInFileLst("psl", destDb, srcDb, opts.annotationType, parts, transMap.getClusterMappedPsl)
inMapInfosTmp = mkInFileLst("mapInfo", destDb, srcDb, opts.annotationType, parts, transMap.getClusterMappedInfo)

# output
outPrefix = os.path.splitext(fileOps.uncompressedBase(opts.mappedPsl))[0]
outPslTmp = opts.mappedPsl + tmpExt + ".bz2" # .bz2 so it can be read
outMapInfo = outPrefix + ".mapinfo.bz2"

###
# combine and filter psls
# not using polyA, doesn't seem worth the cost
###
xargs = ["xargs", "cat"]
qsort = ["sort","-k","10,10", "-k", "12,12n", "-k", "13,13n"]
pslCDnaFilter = ["pslCDnaFilter", "-verbose=0", "-minQSize=" + str(transMap.minQSize), "-minCover=" + str(transMap.minCover), "-bestOverlap",
                 "-globalNearBest=" + str(transMap.getGlobalNearBest(destDb)), "stdin", "stdout"]
pslQueryUniq = ["../../bin/pslQueryUniq"]
bzip2 = ["bzip2", "-c"]
fileOps.ensureFileDir(outPslTmp)
runCmds([xargs, qsort, pslCDnaFilter, pslQueryUniq, bzip2], stdin=inPslsTmp, stdout=outPslTmp)

###
# combine and select mapInfo files, update qName, only keep one header
###
xargs = ["xargs", "cat"]
awkMapInfo = ["tawk", "((NR==1) || !/#/)"]
pslMapInfoSelect = ["pslMapInfoSelect", "-dropUniq2nd", "stdin", outPslTmp, "stdout"]
runCmds([xargs, awkMapInfo, pslMapInfoSelect, bzip2], stdin=inMapInfosTmp, stdout=outMapInfo)

os.rename(outPslTmp, opts.mappedPsl)
os.unlink(inPslsTmp)
os.unlink(inMapInfosTmp)
