#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import sqlite3
import argparse
from transMap import getChromSizes
from transMap.genomeData import AnnotationType
from transMap.srcData import SourceDbTables
from pycbio.sys import loggingOps
from pycbio.sys import fileOps
from pycbio.hgdata.hgLite import SequenceDbTable, PslDbTable
import sys
import pipettor


def parseArgs():
    desc = """Validate a transmap source sqlite3 database
    """
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument("srcHgDb", help="""Genome database for assembly""")
    parser.add_argument("annotationType", choices=(AnnotationType.rna, AnnotationType.est, AnnotationType.refseq, AnnotationType.gencode, AnnotationType.ensembl), type=AnnotationType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


def getSeqSizes(transMapSrcDbConn, seqSizesFh):
    srcSeqTbl = SequenceDbTable(transMapSrcDbConn, SourceDbTables.srcSeqTbl)
    sql = "SELECT name, length(seq) FROM {table}"
    for row in srcSeqTbl.query(sql):
        fileOps.prRow(seqSizesFh, row)


def getSeqSizesFile(srcHgDb, annotationType, transMapSrcDbConn):
    tmpSeqSizes = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annotationType), ".sizes")
    with open(tmpSeqSizes, "w") as seqSizesFh:
        getSeqSizes(transMapSrcDbConn, seqSizesFh)
    return tmpSeqSizes


def writeSrcPsls(transMapSrcDbConn, pslFh):
    srcAlignTbl = PslDbTable(transMapSrcDbConn, SourceDbTables.srcAlignTbl)
    for row in srcAlignTbl.query("SELECT {} FROM {{table}};".format(PslDbTable.columnsNamesSql)):
        fileOps.prRow(pslFh, row)


def getPslFile(srcHgDb, annotationType, transMapSrcDbConn):
    tmpPslFile = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annotationType), ".psl")
    with open(tmpPslFile, "w") as pslFh:
        writeSrcPsls(transMapSrcDbConn, pslFh)
    return tmpPslFile


def pslCheck(srcHgDb, tmpPslFile, tmpSeqSizes):
    pslCheckCmd = ("pslCheck", "-ignoreQUniq",
                   "-querySizes={}".format(tmpSeqSizes),
                   "-targetSizes={}".format(getChromSizes(srcHgDb)),
                   tmpPslFile)
    pipettor.run((pslCheckCmd,), stderr=None)


def checkAlignments(srcHgDb, annotationType, transMapSrcDbConn):
    tmpPslFile = getPslFile(srcHgDb, annotationType, transMapSrcDbConn)
    tmpSeqSizes = getSeqSizesFile(srcHgDb, annotationType, transMapSrcDbConn)
    pslCheck(srcHgDb, tmpPslFile, tmpSeqSizes)
    fileOps.rmFiles(tmpPslFile, tmpSeqSizes)


def checkZeroCount(transMapSrcDbConn, sql):
    cur = transMapSrcDbConn.cursor()
    cur.execute(sql)
    row = cur.fetchone()
    if row[0] != 0:
        raise Exception("Expected 0 matching rows, got {} from {}".format(row[0], sql))
    cur.close()


def checkXRef(transMapSrcDbConn):
    sql = """SELECT count(*) FROM {srcXRefTbl} """ \
          """WHERE srcAlignId NOT IN (SELECT qName FROM {srcAlignTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                                 srcAlignTbl=SourceDbTables.srcAlignTbl)
    checkZeroCount(transMapSrcDbConn, sql)
    sql = """SELECT count(*) FROM {srcAlignTbl} """ \
          """WHERE qName NOT IN (SELECT srcAlignId FROM {srcXRefTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                                srcAlignTbl=SourceDbTables.srcAlignTbl)
    checkZeroCount(transMapSrcDbConn, sql)


def checkMetadata(transMapSrcDbConn):
    sql = """SELECT count(*) FROM {srcXRefTbl} """ \
          """WHERE srcId NOT IN (SELECT srcId FROM {srcMetadataTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                               srcMetadataTbl=SourceDbTables.srcMetadataTbl)
    checkZeroCount(transMapSrcDbConn, sql)
    sql = """SELECT count(*) FROM {srcXRefTbl} """ \
          """WHERE srcId NOT IN (SELECT srcId FROM {srcMetadataTbl})""".format(srcXRefTbl=SourceDbTables.srcXRefTbl,
                                                                               srcMetadataTbl=SourceDbTables.srcMetadataTbl)
    checkZeroCount(transMapSrcDbConn, sql)


def checkTransMapSrcDb(srcHgDb, annotationType, transMapSrcDb):
    transMapSrcDbConn = sqlite3.connect(transMapSrcDb)
    checkAlignments(srcHgDb, annotationType, transMapSrcDbConn)
    checkXRef(transMapSrcDbConn)
    if annotationType != AnnotationType.est:
        checkMetadata(transMapSrcDbConn)
    transMapSrcDbConn.close()

# entry
opts = parseArgs()
checkTransMapSrcDb(opts.srcHgDb, opts.annotationType, opts.transMapSrcDb)
