#!/usr/bin/env python
import sys, os
rootDir = os.path.normpath(os.path.dirname(os.path.dirname(sys.argv[0])))
sys.path.append(rootDir+"/extern/pycbio/lib")
from optparse import OptionParser
from pycbio.tsv.TSVTable import TSVTable
from pycbio.sys import fileOps

class CmdLine(object):
    usage="""%prog [options] sizes1 sizes2 sizeDiffs

Compare number of rows in all transMap tables in all databases using two files generated
by getTransMapTableSizes.
"""
    def __init__(self):
        parser = OptionParser(usage=CmdLine.usage)
        (opts, args) = parser.parse_args()
        if len(args) != 3:
            parser.error("wrong number of arguments")
        self.sizes1, self.sizes2, self.sizeDiffs = args
        self.__dict__.update(opts.__dict__)

class TblSizes(TSVTable):
    def __init__(self, sizesTsv):
        TSVTable.__init__(self, sizesTsv, typeMap={"rows": int})
        self.dbTblIdx = {}
        for row in self:
            self.dbTblIdx[(row.database, row.table)] = row

    def getHost(self):
        return self[0].host

    def get(self, db, tbl):
        return self.dbTblIdx.get((db, tbl))

    def getKeys(self):
        return set(self.dbTblIdx.iterkeys())

def getDbTbls(tblSizes1, tblSizes2):
    dbTbls = list(tblSizes1.getKeys() | tblSizes2.getKeys())
    dbTbls.sort(key=lambda x: x)
    return dbTbls

def numRowsAsInt(numRows):
    return numRows.rows if numRows != None else 0

def calcFracDelta(rowsDelta, numRows):
    if numRows == 0:
        return 1.0 if rowsDelta >=0 else -1.0
    else:
        return float(rowsDelta)/numRows

def cmpTransMapTbl(db, tbl, numRows1, numRows2, diffsFh):
    numRows1 = numRowsAsInt(numRows1)
    numRows2 = numRowsAsInt(numRows2)
    rowsDelta = numRows2 - numRows1
    if rowsDelta >= 0:
        fracDelta = calcFracDelta(rowsDelta, numRows1)
    else:
        fracDelta = calcFracDelta(rowsDelta, numRows2)

    fileOps.prRowv(diffsFh, db, tbl, numRows1, numRows2, rowsDelta, "%0.3f" % fracDelta)

def cmpTransMapTbls(tblSizes1, tblSizes2, diffsFh):
    dbTbls = getDbTbls(tblSizes1, tblSizes2)
    fileOps.prRowv(diffsFh, "database", "table", tblSizes1.getHost() + "_rows", tblSizes2.getHost() + "_rows", "rowsDelta", "rowsChange")
    for dbTbl in dbTbls:
        db, tbl = dbTbl
        cmpTransMapTbl(db, tbl, tblSizes1.get(db, tbl), tblSizes2.get(db, tbl), diffsFh)

opts = CmdLine()
tblSizes1 = TblSizes(opts.sizes1)
tblSizes2 = TblSizes(opts.sizes2)
with open(opts.sizeDiffs, "w") as diffsFh:
    cmpTransMapTbls(tblSizes1, tblSizes2, diffsFh)
