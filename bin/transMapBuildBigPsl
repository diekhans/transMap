#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import sys
import os
import argparse
import pipettor
from pycbio.sys import fileOps, loggingOps
from transMap import setSortLocale, getChromSizes
from transMap.genomeData import AnnotationType
from transMap.transMapConf import transMapConfLoad
from transMap.bigTransMap import bigTransMapSortMerge


def parseArgs():
    desc = """combine results of all transmap runs for a destDb into
    a single bigPsl.
    """
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument("configPyFile",
                        help="""configuration python file""")
    parser.add_argument("destHgDb",
                        help="""destination browser database """)
    parser.add_argument("annotationType", choices=(AnnotationType.rna, AnnotationType.est, AnnotationType.refseq, AnnotationType.ensembl), type=AnnotationType,
                        help="""annotation set type""")
    parser.add_argument("srcHgDbs", nargs="*",
                        help="""source hgDb for all source assemblies """)
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


def transMapBuildBigPsl(opts):
    conf = transMapConfLoad(opts.configPyFile,
                            destHgDb=opts.destHgDb,
                            annotationType=opts.annotationType)

    inPreBigPsls = [conf.getBatchSrcHgDbPreBigPsl(srcHgDb) for srcHgDb in opts.srcHgDbs]
    mappedPreBigPsl = fileOps.tmpFileGet("transMap.dest.", "preBigPsl")
    bigTransMapSortMerge(inPreBigPsls, mappedPreBigPsl)
    fileOps.ensureFileDir(conf.mappedBigPslFile)
    mappedBigPslTmpFile = fileOps.atomicTmpFile(conf.mappedBigPslFile)
    pipettor.run(["bedToBigBed", "-type=bed12+20", "-tab",
                  "-as={}".format(conf.bigTransMapAsPath),
                  "-extraIndex=name",
                  mappedPreBigPsl, getChromSizes(conf.destHgDb),
                  mappedBigPslTmpFile])
    # validate
    pipettor.run([["bigPslToPsl", mappedBigPslTmpFile, "stdout"],
                  ["pslCheck", "stdin"]])

    fileOps.atomicInstall(mappedBigPslTmpFile, conf.mappedBigPslFile)
    os.unlink(mappedPreBigPsl)


setSortLocale()
transMapBuildBigPsl(parseArgs())
