#!/usr/bin/env python3
from __future__ import print_function
import transMapProgSetup  # noqa: F401
import os
import re
import argparse
import pipettor
import logging
from collections import defaultdict
from pycbio.sys import fileOps
from transMap.transMapConf import transMapConfLoad
from transMap.genomeData import Genomes, AnnotationType
from transMap.srcData import SourceDbTables
from transMap.bigTransMap import BigTransMap


def parseArgs():
    desc = """Get statistics on what was mapped to a given database
    """
    parser = argparse.ArgumentParser(description=desc)
    transMapProgSetup.addCmdOptions(parser)
    parser.add_argument("configPyFile",
                        help="""configuration python file""")
    parser.add_argument("destHgDb",
                        help="""destination browser database """)
    parser.add_argument("outTsv",
                        help="""write results to this file""")
    opts = parser.parse_args()
    transMapProgSetup.setupFromCmd(opts)
    return opts


header = ("destHgDb", "srcHgDb", "srcCommonName", "srcScientificName", "annotationType", "count")

def haveTransMap(conf, destHgDb, annotationType):
    return os.path.exists(conf.getMappedBigPslFileForDestHgDb(destHgDb, annotationType))

def countBigTransMap(conf, destHgDb, annotationType):
    counts = defaultdict(int)  # by srcHgDb
    # only get srcDb column
    srcDbCol = BigTransMap._fields.index("srcDb")
    cmd = [["bigBedToBed", conf.getMappedBigPslFileForDestHgDb(destHgDb, annotationType), "/dev/stdout"],
           ["cut", "-f", srcDbCol+1]]
    with pipettor.Popen(cmd) as bedFh:
        for line in bedFh:
            counts[line.strip()] += 1
    return counts


def countBigTransMapFiles(conf, destHgDb):
    counts = defaultdict(lambda : defaultdict(int))  # by annotation type, by srcDb
    for annotationType in AnnotationType:
        if haveTransMap(conf, destHgDb, annotationType):
            counts[annotationType] = countBigTransMap(conf, destHgDb, annotationType)
    if len(counts) == 0:
        raise Exceptions("no mappings for {}".format(destHgDb))
    return counts

def getAllSrcHgDb(counts):
    srcHgDbs = set()
    for annotationType in AnnotationType:
        if annotationType in counts:
            for srcHgDb in list(counts[annotationType].keys()):
                srcHgDbs.add(srcHgDb)
    return sorted(srcHgDbs)


def prStats(tsvFh, genomes, destHgDb, srcHgDb, annotationType, count):
    srcHgDbAsm = genomes.genomeAsms[srcHgDb]
    fileOps.prRowv(tsvFh, destHgDb, srcHgDb, srcHgDbAsm.commonName, srcHgDbAsm.scientificName,
                   annotationType, count)

def writeDetails(tsvFh, genomes, destHgDb, counts):
    for srcHgDb in getAllSrcHgDb(counts):
        for annotationType in AnnotationType:
            prStats(tsvFh, genomes, destHgDb, srcHgDb, annotationType, counts[annotationType][srcHgDb])

def transMapDetails(opts):
    conf = transMapConfLoad(opts.configPyFile)
    genomes = Genomes(conf)
    counts = countBigTransMapFiles(conf, opts.destHgDb)
    with open(opts.outTsv, "w") as tsvFh:
        writeDetails(tsvFh, genomes, opts.destHgDb, counts)


# entry
transMapDetails(parseArgs())
