#!/usr/bin/env python

import transMapProgSetup  # noqa: F401
import sys
import argparse
import sqlite3
from transMap.genomeDefs import AnnSetType
from transMap.transMapLite import SourceDbTables
from pycbio.sys import fileOps
import pipettor
from pycbio.hgdata import hgLite

verbose = False


def parseArgs():
    desc = """Obtain PSL alignments for UCSC GenBank files.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--verbose", action="store_true", default=False,
                        help="""verbose tracing""")
    parser.add_argument("--limit", type=int, default=None,
                        help="""limit to this number of records for testing""")
    parser.add_argument("srcHgDbName",
                        help="""Genome database for assembly""")
    parser.add_argument("annSetType", choices=(AnnSetType.mrna, AnnSetType.splicedEst, AnnSetType.refSeq), type=AnnSetType,
                        help="""annotation set type to obtain""")
    parser.add_argument("transMapSrcDb",
                        help="""sqlite3 database for source dataset""")
    opts = parser.parse_args()
    global verbose
    verbose = opts.verbose
    return opts

pslSelectTmpl = """SELECT matches, misMatches, repMatches, nCount, qNumInsert, qBaseInsert, tNumInsert, """ \
                """tBaseInsert, strand, concat(qName, ".", version), qSize, qStart, qEnd, tName, tSize, tStart, tEnd, """ \
                """blockCount, blockSizes, qStarts, tStarts from {}, gbCdnaInfo """ \
                """WHERE (qName = acc)"""


def generatePslFile(srcHgDbName, annSetType, limit, outPslTmp):
    "get PSL file with unique ids"
    if annSetType == AnnSetType.mrna:
        table = "all_mrna"
    elif annSetType == AnnSetType.splicedEst:
        table = "intronEst"
    elif annSetType == AnnSetType.refSeq:
        table = "refSeqAli"
    psl = pslSelectTmpl.format(table)
    if limit is not None:
        psl += " LIMIT {}".format(limit)
    hgsqlCmd = ("hgsql", "-Ne", psl, srcHgDbName)
    sortCmd = ("sort", "-k", "14,14", "-k", "16,16n")
    uniqCmd = ("pslQueryUniq", "-p", srcHgDbName + ":")
    pipettor.run([hgsqlCmd, sortCmd, uniqCmd], stdout=outPslTmp)


def loadAligns(outPslTmp, transMapSrcDb):
    srcDbConn = sqlite3.connect(transMapSrcDb)
    alignSrcTbl = hgLite.PslLite(srcDbConn, SourceDbTables.srcAlignsTbl, create=True)
    alignSrcTbl.loadPslFile(outPslTmp)
    alignSrcTbl.index()
    srcDbConn.close()


def getGenbankAligns(srcHgDbName, annSetType, limit, transMapSrcDb):
    outPslTmp = fileOps.tmpFileGet("transMap.{}.".format(annSetType), ".psl")
    if verbose:
        sys.stderr.write("tmp psl: {}\n".format(outPslTmp))
    generatePslFile(srcHgDbName, annSetType, limit, outPslTmp)
    loadAligns(outPslTmp, transMapSrcDb)
    fileOps.rmFiles(outPslTmp)

# entry
opts = parseArgs()
getGenbankAligns(opts.srcHgDbName, opts.annSetType, opts.limit, opts.transMapSrcDb)
