#!/usr/bin/env python

from __future__ import print_function
import transMapProgSetup  # noqa: F401
import argparse
import sqlite3
from pycbio.sys import fileOps
from transMap.mappingChainData import MappingChainsDbTables, MappingChainsIndexDbTable, MappingChainLoc


def parseArgs():
    desc = """Get information about genomes.  This finds all available chains and
    source data for all active genomes.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("mappingChainsIndexDb",
                        help="""sqlite3 database for indexing chains""")
    parser.add_argument("chainFile",
                        help="""chain file to index, maybe piped""")
    opts = parser.parse_args()
    return opts


def buildChainLoc(startLine, offset, length):
    # chain 1009 chr9 136372045 + 68288114 68330909 BC040840 1033 - 0 1018 1
    words = startLine.split()
    return MappingChainLoc.factory(words[7], int(words[10]), int(words[11]), offset, length)


def generateChainIndex(chainFh):
    chainsLocs = []
    startLine = startOff = None
    offset = 0
    for line in chainFh:
        if line.startswith("chain"):
            if startLine is not None:
                chainsLocs.append(buildChainLoc(startLine, startOff, offset - startOff))
            startLine = line
            startOff = offset
        offset += len(line)
    if startLine is not None:
        chainsLocs.append(buildChainLoc(startLine, startOff, offset - startOff))
    return chainsLocs


def mappingChainIndex(mappingChainsIndexDb, chainFile):
    with open(chainFile) as chainFh:
        chainsLocs = generateChainIndex(chainFh)
    fileOps.ensureFileDir(mappingChainsIndexDb)
    indexDbConn = sqlite3.connect(mappingChainsIndexDb)
    indexDbTbl = MappingChainsIndexDbTable(indexDbConn, MappingChainsDbTables.mappingChainsTbl, create=True)
    indexDbTbl.loads(chainsLocs)
    indexDbTbl.index()

# entry
opts = parseArgs()
mappingChainIndex(opts.mappingChainsIndexDb, opts.chainFile)
