#!/usr/bin/env python

from __future__ import print_function
import transMapProgSetup  # noqa: F401
import argparse
from transMap.genomeData import AnnotationType
from transMap import alignIdToSrcId
from transMap.srcData import querySrcPsls, loadSeqFa
from pycbio.db.sqliteOps import sqliteConnect
from pycbio.sys import fileOps
import pipettor


def parseArgs():
    desc = """Obtain RNA sequence file for the Ensembl and GENCODE alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("srcHgDb",
                        help="""Genome database for assembly""")
    parser.add_argument("annotationType", choices=(AnnotationType.ensembl,), type=AnnotationType,
                        help="""annotation set type to obtain""")
    parser.add_argument("srcDb",
                        help="""sqlite3 database for source dataset; must have srcAlign table loaded with alignments""")
    return parser.parse_args()


def writeSrcPsls(srcDbConn, pslFh):
    done = set()
    for row in querySrcPsls(srcDbConn):
        qName = alignIdToSrcId(row[9])
        if qName not in done:
            row = row[0:9] + (qName,) + row[10:]
            fileOps.prRow(pslFh, row)
            done.add(qName)


def getSrcGenePred(srcHgDb, annotationType, srcDbConn):
    "get genePreds as a file, otherwise database connection might time out during processing"
    # use alignments rather than original genePreds so if they are filtered, it all bubbles down
    tmpSrcGp = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annotationType), ".gp")
    mrnaToGeneCmd = ("mrnaToGene", "-insertMergeSize=-1", "-noCds", "/dev/stdin", tmpSrcGp)
    with pipettor.Popen([mrnaToGeneCmd], "w") as pslFh:
        writeSrcPsls(srcDbConn, pslFh)
    return tmpSrcGp


def getSeqFasta(srcHgDb, annotationType, srcGp):
    "get fasta file"
    tmpSeqFa = fileOps.tmpFileGet("transMap.{}.{}.".format(srcHgDb, annotationType), ".fa")

    # already has srcId with srcHgDb in it!
    getRnaPredCmd = ("getRnaPred", srcHgDb, srcGp, "all", "/dev/stdout")
    pipettor.run([getRnaPredCmd], stdout=tmpSeqFa)
    return tmpSeqFa


def getEnsemblSeqs(srcHgDb, annotationType, srcDb):
    fileOps.ensureFileDir(srcDb)
    srcDbConn = sqliteConnect(srcDb, create=True)
    tmpSrcGp = getSrcGenePred(srcHgDb, annotationType, srcDbConn)
    tmpSeqFa = getSeqFasta(srcHgDb, annotationType, tmpSrcGp)
    loadSeqFa(tmpSeqFa, srcDbConn)
    srcDbConn.close()
    fileOps.rmFiles(tmpSrcGp, tmpSeqFa)

# entry
opts = parseArgs()
getEnsemblSeqs(opts.srcHgDb, opts.annotationType, opts.srcDb)
