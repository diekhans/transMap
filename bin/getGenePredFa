#!/usr/bin/env python

import sys, os, re
rootDir = os.path.normpath(os.path.dirname(os.path.dirname(sys.argv[0])))
sys.path = [rootDir + "/extern/pycbio/lib", rootDir + "/lib/py"] + sys.path
from optparse import OptionParser
from transMap import getTwoBit
from pycbio.sys import procOps, fileOps

class CmdLine(object):
    usage="""%prog [options] db geneTable faFile
       front end to getRnaPred that
       First extras the genePred table to a file to avoid lost mysql
       connections that maybe happening during long pauses to get sequence.
       Special handling for GENCODE to avoid duplicate sequence in fasta file
       for PAR region.
"""
    def __init__(self):
        parser = OptionParser(usage=CmdLine.usage)
        (opts, args) = parser.parse_args()
        if len(args) != 3:
            parser.error("wrong number of arguments")
        (self.db, self.geneTable, self.faFile) = args
        self.__dict__.update(opts.__dict__)

def isGenePredExt(db, gpTbl):
    # does it contain the exonFrames field?
    return procOps.callProc(["hgsql", "-Ne", "describe " + gpTbl, db]).find("exonFrames") >= 0

def getPredFields(db, gpTbl):
    cols = 'concat("' + db + ':",name), chrom, strand, txStart, txEnd, cdsStart, cdsEnd, exonCount, exonStarts, exonEnds'
    if isGenePredExt(db, gpTbl):
        cols += ", score, name2, cdsStartStat, cdsEndStat, exonFrames"
    return cols

def getGencodeTagsTbl(gpTbl):
    return re.sub("(Comp|Basic)", "Tag", gpTbl)

def getGenePredSelect(db, gpTbl):
    sql = "select " + getPredFields(db, gpTbl) + " from " + gpTbl + " gp"
    if gpTbl.startswith("wgEncodeGencode"):
        parSubSelect = "select name,chrom from " + gpTbl + " gpsub, " + getGencodeTagsTbl(gpTbl) + ' tag where (gpsub.name=tag.transcriptId) and (gpsub.chrom = "chrY") and (tag.tag = "PAR")'
        sql += " where ((gp.name, gp.chrom) not in (" + parSubSelect + "))"
    return sql

def getGenePredFile(db, gpTbl):
    tmpGenePred = fileOps.tmpFileGet(gpTbl)
    procOps.runProc(["hgsql", "-Ne", getGenePredSelect(db, gpTbl), db], stdout=tmpGenePred)
    return tmpGenePred

# entry
opts = CmdLine()

tmpGenePred = getGenePredFile(opts.db, opts.geneTable)
procOps.runProc(["getRnaPred", "-genomeSeqs="+getTwoBit(opts.db), opts.db, tmpGenePred, "all", opts.faFile])

