#!/usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../extern/pycbio/lib")
sys.path.append(myBinDir + "/../lib/py")
from optparse import OptionParser
from pycbio.sys import fileOps, Pipeline
from transMap import GenomeDefs, setup

class CmdOpts(object):
    usage = """%prog [options] genomeDefsPickle jobDir resultsDir"""
    def __init__(self):
        parser = OptionParser(usage=CmdOpts.usage)
        setup.addParseOpts(parser)
        (opts, args) = parser.parse_args()
        if len(args) != 3:
            parser.error("wrong number of arguments")
        (self.genomeDefsPickle, self.jobDir, self.resultsDir) = args
        self.__dict__.update(opts.__dict__)

def getRelOutPsl(chains, cdnaType):
    return chains.destDb.db + "/" + chains.srcDb.db + "/" + str(cdnaType) + ".psl.bz2"

def haveOutPsl(chains, cdnaType):
    outPsl = "aligns/" + getRelOutPsl(chains, cdnaType)
    return os.path.exists(outPsl)

def addMappingJob(fh, binDir, chains, cdnaType, opts):
    outPsl = opts.resultsDir + getRelOutPsl(chains, cdnaType)
    cmd = ["../"+binDir+"/doRunTransMap", opts.genomeDefsPickle,
           chains.srcDb.db, chains.destDb.db, str(cdnaType),
           "{check out exists "+ outPsl + "}"]
    fh.write("  ".join(cmd))
    fh.write("\n")

opts = CmdOpts()
(genomeDefs, mappings) = setup.mkMappingDefs(opts)

tmpExt = setup.getTmpExt()

jobFile = opts.jobDir + "/jobs.para"
jobFileTmp = jobFile + tmpExt
fileOps.ensureDir(opts.jobDir)
jobFh = open(jobFileTmp, "w")

for chains in mappings:
    for cdnaType in chains.srcDb.cdnaTypes:
        if not haveOutPsl(chains, cdnaType):
            addMappingJob(jobFh, myBinDir, chains, cdnaType, opts)
jobFh.close()
os.rename(jobFileTmp, jobFile)
