#!/usr/bin/env python

from __future__ import print_function
import transMapProgSetup  # noqa: F401
import argparse
from pycbio.db.sqliteOps import sqliteConnect
import pipettor
from pycbio.sys import fileOps
from transMap.genomeData import GenomesDbTables, ChainsSqliteTable, ChainType


def parseArgs():
    desc = """Get information about genomes.  This finds all available chains and
    source data for all active genomes.
    """
    parser = argparse.ArgumentParser(description=desc)
    transMapProgSetup.addCmdOptions(parser)
    parser.add_argument("genomeDb",
                        help="""sqlite3 database for genome information""")
    parser.add_argument("srcHgDb",
                        help="""source database name""")
    parser.add_argument("destHgDb",
                        help="""destination database name""")
    parser.add_argument("chainType", type=ChainType,
                        help="""type of chain""")
    parser.add_argument("mappingChains",
                        help="""output chain file, also creates an associated .db file""")
    opts = parser.parse_args()
    transMapProgSetup.setupFromCmd(opts)
    return opts


def getChains(genomeDbConn, srcHgDb, destHgDb, chainType):
    # all except rbest are derived from all chains
    inChainType = ChainType.rbest if chainType == ChainType.rbest else ChainType.all
    chainsTbl = ChainsSqliteTable(genomeDbConn, GenomesDbTables.chainsTbl)
    chains = chainsTbl.queryByDbsType(srcHgDb, destHgDb, inChainType)
    if chains is None:
        raise Exception("chains in database not found for {} {} {}".format(srcHgDb, destHgDb, chainType))
    return chains


def buildChainFilterCommands(chains, chainType):
    """build commands to convert chains to the specified type"""
    cmds = []
    if (chainType == ChainType.all) or (chainType == ChainType.rbest):
        # no filtering
        cmds.append(["chainFilter", "-noHap", chains.chainFile])
    else:
        # syntenic filtering
        cmds.append(["netFilter", "-syn", "-noHap", chains.netFile])
        cmds.append(["netChainSubset", "-wholeChains", "-skipMissing", "-verbose=0", "/dev/stdin", chains.chainFile, "/dev/stdout"])
    return cmds


def buildChainOutputCommands(mappingChains, mappingChainsIndexDb):
    return [("tee", mappingChains),
            ("mappingChainIndex", mappingChainsIndexDb, "/dev/stdin")]


def mappingChainBuild(genomeDb, srcHgDb, destHgDb, chainType, mappingChains):
    fileOps.ensureFileDir(mappingChains)
    mappingChainsIndexDb = "{}.db".format(mappingChains)
    genomeDbConn = sqliteConnect(genomeDb)
    chains = getChains(genomeDbConn, srcHgDb, destHgDb, chainType)
    cmds = buildChainFilterCommands(chains, chainType) + buildChainOutputCommands(mappingChains, mappingChainsIndexDb)
    pipettor.run(cmds)

# entry
opts = parseArgs()
mappingChainBuild(opts.genomeDb, opts.srcHgDb, opts.destHgDb, opts.chainType, opts.mappingChains)
