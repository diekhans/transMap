#!/usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../extern/pycbio/lib")
sys.path.append(myBinDir + "/../lib/py")
from optparse import OptionParser
from pycbio.sys import fileOps, Pipeline, procOps
from transMap import GenomeDefs, setTMPDIR, getTmpExt, runCmds
from transMap.TransMap import Chroms

class CmdOpts(object):
    usage = """%prog [options] genomeDefsPickle srcDb destDb cdnaType mappedPsl"""
    def __init__(self):
        parser = OptionParser(usage=CmdOpts.usage)
        parser.add_option("--chrom", dest="chroms", action="append", default=None,
                          help="only process this chrom, maybe repeated")
        parser.add_option("--firstChrom", dest="firstChrom", action="store", default=None,
                          help="destDb start chrom reverse size sort list chroms")
        parser.add_option("--lastChrom", dest="lastChrom", action="store", default=None,
                          help="destDb last chrom reverse size sort list chroms")
        (opts, args) = parser.parse_args()
        if len(args) != 5:
            parser.error("wrong number of arguments")
        (self.genomeDefsPickle, self.srcDb, self.destDb, self.cdnaType, self.mappedPsl) = args
        self.cdnaType = GenomeDefs.CDnaTypes(self.cdnaType)
        self.__dict__.update(opts.__dict__)
        if ((opts.firstChrom != None) or (opts.lastChrom != None)) and ((opts.firstChrom == None) or (opts.lastChrom == None)):
            parser.error("must specified either both or neither of --firstChrom and --lastChrom")

def bldChroms(opts, dest2bit):
    chromSet = None
    if (opts.chroms != None) or (opts.firstChrom != None):
        chromSet = []
        if opts.chroms != None:
            chromSet.extend(opts.chroms)
        if (opts.firstChrom != None):
            chroms = Chroms(dest2Bit)
            chromSet.extend(chroms.getRange(opts.firstChrom, opts.lastChrom))
    return chromSet

# memory optimizations:
#   - limit cDNA fasta sequences read by pslRecalcMatch step to those that aligned
#   - limit chains read by netChainSubset, since it reads all chains into memory

opts = CmdOpts()
isParasol = os.environ.get("PARASOL") != None
if isParasol:
    os.chdir("..")
tmpDir = setTMPDIR()
tmpExt = getTmpExt()

# skip if already completed
if os.path.exists(opts.mappedPsl):
    sys.stderr.write("Note: output already exists, skipping: " + opts.mappedPsl + "\n")
    sys.exit(0)

genomeDefs = GenomeDefs.load(opts.genomeDefsPickle)
srcDb = genomeDefs.dbs[opts.srcDb]
destDb = genomeDefs.dbs[opts.destDb]
chains = srcDb.destDbs.getChains(destDb)

rel2bit =  destDb.db + "/" + destDb.db + ".2bit"
dest2Bit = "/scratch/data/" + rel2bit
if not os.path.exists(dest2Bit):
    if isParasol:
        raise Exception("on cluster and local 2bit not found: " + dest2Bit)
    dest2Bit = "/cluster/data/" + rel2bit
if (opts.chroms != None) or (opts.firstChrom != None):
    chroms = bldChroms(opts, dest2Bit)
else:
    chroms = None

# input
chainsFile = chains.getChainFile()
srcPsl = "data/"+chains.srcDb.db+"/"+str(opts.cdnaType)+".psl.bz2"
srcFa = "data/"+chains.srcDb.db+"/"+str(opts.cdnaType)+".fa.bz2"
relTargetSeq = "data/" + destDb.db + "/" + destDb.db + ".2bit"
targetSeq = "/scratch/" + relTargetSeq
if not os.path.exists(targetSeq):
    if isParasol:
        raise Exception("on cluster, can't find local genome: " + targetSeq)
    targetSeq = "/cluster/" + relTargetSeq
if not os.path.exists(targetSeq):
    raise Exception("can't find genome: " + targetSeq)


netChainFilterFlag = "-q=" if chains.orient == GenomeDefs.ChainOrient.rev else "-t="

# intermediate output
rawPslTmp = tmpDir + "/mapped.psl" + tmpExt
faTmp = tmpDir + "/mapped.fa" + tmpExt
chainSubsetTmp = None  # only set if used

# output
outPrefix = os.path.splitext(fileOps.uncompressedBase(opts.mappedPsl))[0]
outPslTmp = opts.mappedPsl + tmpExt
outMapInfo = outPrefix + ".mapinfo"

###
# optionally get a subset of the chains
###
if chroms != None:
    chainFile = chainSubsetTmp = tmpDir + "/subset.chain" + tmpExt
    chainFilter = ["chainFilter", netChainFilterFlag + ",".join(chroms), chains.getChainFile()]
    runCmds([chainFilter], stdout=chainSubsetTmp)
else:
    chainFile = chains.getChainFile()

###
# map alignments
##
netFilter = ["netFilter", "-syn", "-noHap"]
if chroms != None:
    # only use a subset
    netFilter.append(netChainFilterFlag + ",".join(chroms))
netFilter.append(chains.getNetFile())

netChainSubset = ["netChainSubset", "-wholeChains", "-verbose=0", "stdin", chainFile, "stdout"]
pslMap = ["pslMap", "-chainMapFile"]
if chains.orient == GenomeDefs.ChainOrient.rev:
    pslMap.append("-swapMap")
pslMap.extend(["-mapInfo="+outMapInfo, srcPsl, "stdin", "stdout"])

# target sort speeds up pslRecalcMatch
tsort = ["sort","-k","14,14", "-k", "16,16n"]

fileOps.ensureFileDir(opts.mappedPsl)
runCmds([netFilter, netChainSubset, pslMap, tsort], stdout=rawPslTmp)

###
# get subset of cDNA fasta that were mapped
###
getPslAcc = ["awk", """BEGIN{FS="\t"} {print gensub("-[-0-9.]+$","","g",$10)}""", rawPslTmp]
faSomeRecs = ["faSomeRecords", srcFa, "stdin", faTmp] 
runCmds([getPslAcc, faSomeRecs])

###
# calculate match stats
##
pslRecalcMatch = ["pslRecalcMatch", "-ignoreQUniq", rawPslTmp, targetSeq, faTmp, "stdout"]

# qsort here, just to make filter qsort quicker
qsort = ["sort","-k","10,10", "-k", "12,12n", "-k", "13,13n"]
runCmds([pslRecalcMatch, qsort], stdout=outPslTmp)

os.rename(outPslTmp, opts.mappedPsl)

os.unlink(rawPslTmp)
os.unlink(faTmp)
if chainSubsetTmp != None:
    os.unlink(chainSubsetTmp)
