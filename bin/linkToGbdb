#!/usr/bin/env python

from __future__ import print_function
import transMapProgSetup  # noqa: F401
import sys
import os
import argparse
from pycbio.sys import fileOps
from transMap.genomeData import Genomes
from transMap.transMapConf import transMapConfLoad


def parseArgs():
    desc = """symlink TransMap mapped files to GBDB
    """
    parser = argparse.ArgumentParser(description=desc)
    transMapProgSetup.addCmdOptions(parser)
    parser.add_argument("configPyFile",
                        help="""configuration python file""")
    opts = parser.parse_args()
    transMapProgSetup.setupFromCmd(opts)
    return opts


def symlinkIsSame(bigPslFile, gbdbFile):
    if not os.path.exists(gbdbFile):
        return False
    if not os.path.islink(gbdbFile):
        raise Exception("/gbdb bigPslFile exists but is not a synlink".format(gbdbFile))
    curLink = os.path.readlink(gbdbFile)
    return curLink == bigPslFile


def symlinkIfDiff(bigPslFile, gbdbFile):
    if not symlinkIsSame(bigPslFile, gbdbFile):
        if os.path.exists(gbdbFile):
            os.path.unlink(gbdbFile)
        os.symlink(os.path.abspath(bigPslFile), gbdbFile)


def linkDestDbMappingToGbDb(conf, destDbMapping):
    "Return false if bigPsl file is not found"
    bigPslFile = conf.getMappedBigPslFileForDestHgDb(destDbMapping.destHgDb, destDbMapping.annotationType)
    if not os.path.exists(bigPslFile):
        sys.stderr.write("Error: bigPsl file not found: {}\n".format(bigPslFile))
        return False
    gbdbFile = conf.getMappedGbdbBigPslFile(destDbMapping.destHgDb, destDbMapping.annotationType)
    fileOps.ensureFileDir(gbdbFile)
    symlinkIfDiff(bigPslFile, gbdbFile)
    return True


def linkToGbdb(opts):
    conf = transMapConfLoad(opts.configPyFile)
    genomes = Genomes(conf)
    missingFileCount = 0
    for destDbMapping in genomes.getCandidateDestDbMappings():
        if not linkDestDbMappingToGbDb(conf, destDbMapping):
            missingFileCount += 1
    if missingFileCount > 0:
        raise Exception("{} bigPsl files were not found".format(missingFileCount))

linkToGbdb(parseArgs())
